services:
  traefik:
    image: traefik:v3.2.3
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "8080:8080" # Traefik Dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /volume1/Docker/traefik/acme.json:/acme.json
      - /volume1/Docker/traefik/config:/etc/traefik
    command:
      - "--api.insecure=true"  # Enable dashboard without auth - change in production
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Add these for HTTPS
      # - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      # - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      # - "--certificatesresolvers.myresolver.acme.email=your@email.com"
      # - "--certificatesresolvers.myresolver.acme.storage=/acme.json"
    networks:
      - intro-network

  minio:
    image: minio/minio:RELEASE.2024-10-02T17-50-41Z
    container_name: minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${LH_MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${LH_MINIO_ROOT_PASSWORD}
      MINIO_DOMAIN: ${LH_MINIO_DOMAIN}
      MINIO_DEFAULT_BUCKETS: ${LH_MINIO_BUCKETS}
# TODO: Add these back in when we have a use case for them
#      MINIO_SERVER_URL: ${LH_MINIO_SERVER_URL:-http://localhost:9000}
#      MINIO_BROWSER_REDIRECT_URL: ${LH_MINIO_BROWSER_URL:-http://localhost:9001}
#      MINIO_API_CORS_ALLOW_ORIGIN: ${LH_MINIO_CORS_ORIGIN:-"*"}
    user: "0:0"
    ports:
      - "${LH_MINIO_API_PORT:-9000}:9000"
      - "${LH_MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - /volume1/Docker/minio/data:/data
      - /volume1/Docker/minio/config:/root/.minio
    command: minio server /data --console-address ':${LH_MINIO_CONSOLE_PORT:-9001}' --address ':${LH_MINIO_API_PORT:-9000}'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    networks:
      - intro-network
    deploy:
      resources:
        limits:
          memory: ${LH_MINIO_MEMORY_LIMIT:-2g}
        reservations:
          memory: ${LH_MINIO_MEMORY_RESERVATION:-1g}
    labels:
      - "traefik.enable=true"
      # API
      - "traefik.http.routers.minio-api.rule=Host(`minio.flowloom.com`)"
      - "traefik.http.routers.minio-api.service=minio-api"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
      # Console
      - "traefik.http.routers.minio-console.rule=Host(`minio-console.flowloom.com`)"
      - "traefik.http.routers.minio-console.service=minio-console"
      - "traefik.http.services.minio-console.loadbalancer.server.port=9001"

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: /bin/bash
    environment:
      MINIO_BUCKETS: ${LH_MINIO_DEFAULT_BUCKETS} # Comma-separated list of buckets
      MINIO_ACCESS_KEY: ${LH_MINIO_ROOT_USER}
      MINIO_SECRET_KEY: ${LH_MINIO_ROOT_PASSWORD}
      # Optional configurations with defaults
      BUCKET_VERSIONING: ${LH_MINIO_BUCKET_VERSIONING:-false}
      BUCKET_PUBLIC_ACCESS: ${LH_MINIO_BUCKET_PUBLIC_ACCESS:-false}
      MAX_RETRY_ATTEMPTS: ${LH_MINIO_INIT_MAX_RETRIES:-30}
      RETRY_INTERVAL: ${LH_MINIO_INIT_RETRY_INTERVAL:-2}
    command: >
      -c "
      echo ""Buckets: $$MINIO_BUCKETS"";
      echo 'Check if MinIO is up';
      until mc alias set myminio http://minio:9000 $$MINIO_ACCESS_KEY $$MINIO_SECRET_KEY; do
        echo 'Waiting for MinIO to start...' && sleep 0.1;
      done;
      sleep 5;
      if [ -z \"$$MINIO_BUCKETS\" ]; then
        echo 'No buckets defined in MINIO_BUCKETS';
        exit 1;
      fi;
      IFS=',' read -ra BUCKETS <<< \"$$MINIO_BUCKETS\";
      for BUCKET in \"\$${BUCKETS[@]}\"; do
        echo \"Processing bucket: $$BUCKET\";
        if ! mc ls myminio/\$$BUCKET > /dev/null 2>&1; then
          mc mb myminio/\$$BUCKET;
        else
          echo \"Bucket \$$BUCKET already exists, skipping creation.\";
        fi;
      done;
      echo 'Bucket creation complete';
      echo 'MinIO initialization complete';
      "
    network_mode: "service:minio"

# TODO: Fix mounting of the scripts directory when we have time
#  minio-init:
#    image: minio/mc:latest
#    depends_on:
#      minio:
#        condition: service_healthy
#    entrypoint: /bin/bash
#    environment:
#      MINIO_BUCKETS: ${LH_MINIO_DEFAULT_BUCKETS}
#      MINIO_ACCESS_KEY: ${LH_MINIO_ROOT_USER}
#      MINIO_SECRET_KEY: ${LH_MINIO_ROOT_PASSWORD}
#      MINIO_HOST: minio
#      MINIO_PORT: 9000
#      # Optional configurations with defaults
#      BUCKET_VERSIONING: ${LH_MINIO_BUCKET_VERSIONING:-false}
#      BUCKET_PUBLIC_ACCESS: ${LH_MINIO_BUCKET_PUBLIC_ACCESS:-false}
#      MAX_RETRY_ATTEMPTS: ${LH_MINIO_INIT_MAX_RETRIES:-30}
#      RETRY_INTERVAL: ${LH_MINIO_INIT_RETRY_INTERVAL:-2}
#    healthcheck:
#      test: ["CMD", "mc", "alias", "ls", "myminio"]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#    volumes:
#      - ./minio:/minio/scripts:ro
#    command: -c "ls -lanh /minio/scripts && echo 'Debug complete'"
#    network_mode: "service:minio"
#    restart: on-failure:3

  nessie:
    image: bitnami/nessie:0.101.3
    container_name: nessie
    restart: unless-stopped
    user: "0:0"
    depends_on:
      minio:
        condition: service_healthy
    environment:
      QUARKUS_PROFILE: ${LH_NESSIE_QUARKUS_PROFILE}
      QUARKUS_HTTP_PORT: ${LH_NESSIE_API_PORT}
      QUARKUS_LOG_LEVEL: ${LH_NESSIE_LOG_LEVEL}
      OTEL_TRACES_EXPORTER: ${LH_NESSIE_OTEL_TRACES_EXPORTER}
      QUARKUS_OIDC_ENABLED: ${LH_NESSIE_OIDC_ENABLED}
      #QUARKUS_OIDC_AUTH_SERVER_URL: ""
      # True Production should be MONGODB
      nessie.version.store.type: ROCKSDB
      nessie.version.store.persist.rocks.database-path: /nessie/db
      # Only needed if using the MongoDB configuration
#      quarkus.mongodb.connection-string: mongodb://root:password@mongo:27017
    volumes:
      - /volume1/Docker/nessie/data:/nessie/data
      - /volume1/Docker/nessie/db:/nessie/db
    ports:
      - "${LH_NESSIE_API_PORT:-19120}:19120"
      - "${LH_NESSIE_MANAGEMENT_PORT:-9002}:9000"
    networks:
      - intro-network
    healthcheck:
      # Should be the container information not external
      test: ["CMD", "curl", "-f", "http://localhost:9000/q/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nessie.rule=Host(`nessie.flowloom.com`)"
      - "traefik.http.services.nessie.loadbalancer.server.port=19120"

  dremio:
    image: dremio/dremio-oss:25.2
    ports:
      - "${LH_DREMIO_CLIENT_ENDPOINT_PORT:-9047}:9047"
      - "${LH_DREMIO_ALT_CLIENT_ENDPOINT_PORT:-31010}:31010"
    container_name: dremio
    restart: unless-stopped
    user: "0:0"
    environment:
      # Core Configuration
      - DREMIO_MAX_HEAP_MEMORY_SIZE_MB=4096
      - DREMIO_MIN_HEAP_MEMORY_SIZE_MB=2048
      - DREMIO_MAX_DIRECT_MEMORY_SIZE_MB=8192
      - DREMIO_LOG_LEVEL=INFO

      # Performance Tuning
      - DREMIO_MAX_MEMORY_SIZE_MB=16384
      - DREMIO_GC_OPTS=-XX:+UseG1GC -XX:G1HeapRegionSize=32M

      # Network Configuration
      - DREMIO_HOST=0.0.0.0
      - DREMIO_HTTP_PORT=${LH_DREMIO_CLIENT_ENDPOINT_PORT:-9047}
      - DREMIO_CLIENT_PORT=${LH_DREMIO_ALT_CLIENT_ENDPOINT_PORT:-31010}

      # Security (if needed)
      - DREMIO_ENABLE_TLS=false  # Set to true if using HTTPS
      # - DREMIO_TLS_CERTIFICATE_PATH=/path/to/cert
      # - DREMIO_TLS_KEY_PATH=/path/to/key

      # Previous settings
      - DREMIO_JAVA_SERVER_EXTRA_OPTS=-Dpaths.dist=file:///opt/dremio/data/dist
    volumes:
      - /volume1/Docker/dremio/data:/opt/dremio/data
    networks:
      - intro-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9047/apiv2/server_status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dremio.rule=Host(`dremio.flowloom.com`)"
      - "traefik.http.services.dremio.loadbalancer.server.port=9047"

  n8n:
    image: n8nio/n8n:1.73.1
    container_name: n8n
    #build: ./build/n8n
    restart: unless-stopped
    #command: "start --tunnel" # Optional, if you want to use the n8n hosted reverse tunnel for receiving webhooks
    ports:
      - "${LH_N8N_CLIENT_ENDPOINT_PORT:-5678}:5678"
    environment:
      - NODE_FUNCTION_ALLOW_EXTERNAL=*
      - N8N_SECURE_COOKIE=false
    volumes:
      - /volume1/Docker/n8n/data:/home/node/.n8n
      - /volume1/Docker/n8n/files:/files
    user: "0:0"
    networks:
      - intro-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://127.0.0.1:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

networks:
  intro-network:


